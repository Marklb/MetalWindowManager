'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _child_process = require('child_process');

var _path = require('path');

var _ramdaSrcSplitEvery = require('ramda/src/splitEvery');

var _ramdaSrcSplitEvery2 = _interopRequireDefault(_ramdaSrcSplitEvery);

var _ramdaSrcSplit = require('ramda/src/split');

var _ramdaSrcSplit2 = _interopRequireDefault(_ramdaSrcSplit);

var _ramdaSrcPipe = require('ramda/src/pipe');

var _ramdaSrcPipe2 = _interopRequireDefault(_ramdaSrcPipe);

var _ramdaSrcMap = require('ramda/src/map');

var _ramdaSrcMap2 = _interopRequireDefault(_ramdaSrcMap);

var _ramdaSrcRemove = require('ramda/src/remove');

var _ramdaSrcRemove2 = _interopRequireDefault(_ramdaSrcRemove);

var keys = {
  user: (0, _path.join)('HKEY_CURRENT_USER', 'Environment'),

  system: (0, _path.join)('HKEY_LOCAL_MACHINE', 'SYSTEM', 'CurrentControlSet', 'Control', 'Session Manager', 'Environment')
};

function exec(command) {
  return new Promise(function (resolve, reject) {
    (0, _child_process.exec)(command, function (err, stdout, stderr) {
      if (err) reject(err);
      resolve({ stdout: stdout, stderr: stderr });
    });
  });
}

function queryRegistry(key) {
  return exec('reg query "' + key + '"');
}

function parseRegistry(str) {
  return (0, _ramdaSrcPipe2['default'])(
  // split individual parts
  (0, _ramdaSrcSplit2['default'])(generateSpaces(4)),

  // remove title from text
  (0, _ramdaSrcRemove2['default'])(0, 1),

  // generate keysets with [key, type, path]
  (0, _ramdaSrcSplitEvery2['default'])(3),

  // map keysets to object literal { key, type, path}
  (0, _ramdaSrcMap2['default'])(function (key) {
    return {
      name: key[0].trim(),
      type: key[1].trim(),
      path: key[2].trim()
    };
  }))(str);
}

function generateSpaces(times) {
  return new Array(times).join(' ');
}

function getEnv(key) {
  return queryRegistry(key).then(function (_ref) {
    var stdout = _ref.stdout;
    var stderr = _ref.stderr;
    return parseRegistry(stdout);
  });
}

function getUserEnv() {
  return getEnv(keys.user);
}

function getSystemEnv() {
  return getEnv(keys.system);
}

exports['default'] = {
  parseRegistry: parseRegistry,
  queryRegistry: queryRegistry,
  getSystemEnv: getSystemEnv,
  getUserEnv: getUserEnv,
  keys: keys
};
module.exports = exports['default'];